// Generated by @wagmi/cli@0.1.10 on 2/22/2023 at 12:03:58 PM
import {
  useContract,
  UseContractConfig,
  useContractEvent,
  UseContractEventConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
} from 'wagmi'
import { PrepareWriteContractResult, ReadContractResult, WriteContractMode } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketData
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export const marketDataABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_resolverProxy', internalType: 'contract IAddressResolver', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allMarketSummaries',
    outputs: [
      {
        name: '',
        internalType: 'struct PerpsV2MarketData.MarketSummary[]',
        type: 'tuple[]',
        components: [
          { name: 'market', internalType: 'address', type: 'address' },
          { name: 'asset', internalType: 'bytes32', type: 'bytes32' },
          { name: 'key', internalType: 'bytes32', type: 'bytes32' },
          { name: 'maxLeverage', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'marketSize', internalType: 'uint256', type: 'uint256' },
          { name: 'marketSkew', internalType: 'int256', type: 'int256' },
          { name: 'marketDebt', internalType: 'uint256', type: 'uint256' },
          { name: 'currentFundingRate', internalType: 'int256', type: 'int256' },
          { name: 'currentFundingVelocity', internalType: 'int256', type: 'int256' },
          {
            name: 'feeRates',
            internalType: 'struct PerpsV2MarketData.FeeRates',
            type: 'tuple',
            components: [
              { name: 'takerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'overrideCommitFee', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allProxiedMarketSummaries',
    outputs: [
      {
        name: '',
        internalType: 'struct PerpsV2MarketData.MarketSummary[]',
        type: 'tuple[]',
        components: [
          { name: 'market', internalType: 'address', type: 'address' },
          { name: 'asset', internalType: 'bytes32', type: 'bytes32' },
          { name: 'key', internalType: 'bytes32', type: 'bytes32' },
          { name: 'maxLeverage', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'marketSize', internalType: 'uint256', type: 'uint256' },
          { name: 'marketSkew', internalType: 'int256', type: 'int256' },
          { name: 'marketDebt', internalType: 'uint256', type: 'uint256' },
          { name: 'currentFundingRate', internalType: 'int256', type: 'int256' },
          { name: 'currentFundingVelocity', internalType: 'int256', type: 'int256' },
          {
            name: 'feeRates',
            internalType: 'struct PerpsV2MarketData.FeeRates',
            type: 'tuple',
            components: [
              { name: 'takerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'overrideCommitFee', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'globals',
    outputs: [
      {
        name: '',
        internalType: 'struct PerpsV2MarketData.FuturesGlobals',
        type: 'tuple',
        components: [
          { name: 'minInitialMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'liquidationFeeRatio', internalType: 'uint256', type: 'uint256' },
          { name: 'liquidationBufferRatio', internalType: 'uint256', type: 'uint256' },
          { name: 'minKeeperFee', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'contract IPerpsV2MarketViews', type: 'address' }],
    name: 'marketDetails',
    outputs: [
      {
        name: '',
        internalType: 'struct PerpsV2MarketData.MarketData',
        type: 'tuple',
        components: [
          { name: 'market', internalType: 'address', type: 'address' },
          { name: 'baseAsset', internalType: 'bytes32', type: 'bytes32' },
          { name: 'marketKey', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'feeRates',
            internalType: 'struct PerpsV2MarketData.FeeRates',
            type: 'tuple',
            components: [
              { name: 'takerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'overrideCommitFee', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'limits',
            internalType: 'struct PerpsV2MarketData.MarketLimits',
            type: 'tuple',
            components: [
              { name: 'maxLeverage', internalType: 'uint256', type: 'uint256' },
              { name: 'maxMarketValue', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'fundingParameters',
            internalType: 'struct PerpsV2MarketData.FundingParameters',
            type: 'tuple',
            components: [
              { name: 'maxFundingVelocity', internalType: 'uint256', type: 'uint256' },
              { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'marketSizeDetails',
            internalType: 'struct PerpsV2MarketData.MarketSizeDetails',
            type: 'tuple',
            components: [
              { name: 'marketSize', internalType: 'uint256', type: 'uint256' },
              {
                name: 'sides',
                internalType: 'struct PerpsV2MarketData.Sides',
                type: 'tuple',
                components: [
                  { name: 'long', internalType: 'uint256', type: 'uint256' },
                  { name: 'short', internalType: 'uint256', type: 'uint256' },
                ],
              },
              { name: 'marketDebt', internalType: 'uint256', type: 'uint256' },
              { name: 'marketSkew', internalType: 'int256', type: 'int256' },
            ],
          },
          {
            name: 'priceDetails',
            internalType: 'struct PerpsV2MarketData.PriceDetails',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'uint256', type: 'uint256' },
              { name: 'invalid', internalType: 'bool', type: 'bool' },
            ],
          },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'marketDetailsForKey',
    outputs: [
      {
        name: '',
        internalType: 'struct PerpsV2MarketData.MarketData',
        type: 'tuple',
        components: [
          { name: 'market', internalType: 'address', type: 'address' },
          { name: 'baseAsset', internalType: 'bytes32', type: 'bytes32' },
          { name: 'marketKey', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'feeRates',
            internalType: 'struct PerpsV2MarketData.FeeRates',
            type: 'tuple',
            components: [
              { name: 'takerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'overrideCommitFee', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'limits',
            internalType: 'struct PerpsV2MarketData.MarketLimits',
            type: 'tuple',
            components: [
              { name: 'maxLeverage', internalType: 'uint256', type: 'uint256' },
              { name: 'maxMarketValue', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'fundingParameters',
            internalType: 'struct PerpsV2MarketData.FundingParameters',
            type: 'tuple',
            components: [
              { name: 'maxFundingVelocity', internalType: 'uint256', type: 'uint256' },
              { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'marketSizeDetails',
            internalType: 'struct PerpsV2MarketData.MarketSizeDetails',
            type: 'tuple',
            components: [
              { name: 'marketSize', internalType: 'uint256', type: 'uint256' },
              {
                name: 'sides',
                internalType: 'struct PerpsV2MarketData.Sides',
                type: 'tuple',
                components: [
                  { name: 'long', internalType: 'uint256', type: 'uint256' },
                  { name: 'short', internalType: 'uint256', type: 'uint256' },
                ],
              },
              { name: 'marketDebt', internalType: 'uint256', type: 'uint256' },
              { name: 'marketSkew', internalType: 'int256', type: 'int256' },
            ],
          },
          {
            name: 'priceDetails',
            internalType: 'struct PerpsV2MarketData.PriceDetails',
            type: 'tuple',
            components: [
              { name: 'price', internalType: 'uint256', type: 'uint256' },
              { name: 'invalid', internalType: 'bool', type: 'bool' },
            ],
          },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'markets', internalType: 'address[]', type: 'address[]' }],
    name: 'marketSummaries',
    outputs: [
      {
        name: '',
        internalType: 'struct PerpsV2MarketData.MarketSummary[]',
        type: 'tuple[]',
        components: [
          { name: 'market', internalType: 'address', type: 'address' },
          { name: 'asset', internalType: 'bytes32', type: 'bytes32' },
          { name: 'key', internalType: 'bytes32', type: 'bytes32' },
          { name: 'maxLeverage', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'marketSize', internalType: 'uint256', type: 'uint256' },
          { name: 'marketSkew', internalType: 'int256', type: 'int256' },
          { name: 'marketDebt', internalType: 'uint256', type: 'uint256' },
          { name: 'currentFundingRate', internalType: 'int256', type: 'int256' },
          { name: 'currentFundingVelocity', internalType: 'int256', type: 'int256' },
          {
            name: 'feeRates',
            internalType: 'struct PerpsV2MarketData.FeeRates',
            type: 'tuple',
            components: [
              { name: 'takerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'overrideCommitFee', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketKeys', internalType: 'bytes32[]', type: 'bytes32[]' }],
    name: 'marketSummariesForKeys',
    outputs: [
      {
        name: '',
        internalType: 'struct PerpsV2MarketData.MarketSummary[]',
        type: 'tuple[]',
        components: [
          { name: 'market', internalType: 'address', type: 'address' },
          { name: 'asset', internalType: 'bytes32', type: 'bytes32' },
          { name: 'key', internalType: 'bytes32', type: 'bytes32' },
          { name: 'maxLeverage', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'marketSize', internalType: 'uint256', type: 'uint256' },
          { name: 'marketSkew', internalType: 'int256', type: 'int256' },
          { name: 'marketDebt', internalType: 'uint256', type: 'uint256' },
          { name: 'currentFundingRate', internalType: 'int256', type: 'int256' },
          { name: 'currentFundingVelocity', internalType: 'int256', type: 'int256' },
          {
            name: 'feeRates',
            internalType: 'struct PerpsV2MarketData.FeeRates',
            type: 'tuple',
            components: [
              { name: 'takerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFee', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
              { name: 'overrideCommitFee', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'parameters',
    outputs: [
      {
        name: '',
        internalType: 'struct IPerpsV2MarketSettings.Parameters',
        type: 'tuple',
        components: [
          { name: 'takerFee', internalType: 'uint256', type: 'uint256' },
          { name: 'makerFee', internalType: 'uint256', type: 'uint256' },
          { name: 'overrideCommitFee', internalType: 'uint256', type: 'uint256' },
          { name: 'takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'maxLeverage', internalType: 'uint256', type: 'uint256' },
          { name: 'maxMarketValue', internalType: 'uint256', type: 'uint256' },
          { name: 'maxFundingVelocity', internalType: 'uint256', type: 'uint256' },
          { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
          { name: 'nextPriceConfirmWindow', internalType: 'uint256', type: 'uint256' },
          { name: 'delayedOrderConfirmWindow', internalType: 'uint256', type: 'uint256' },
          { name: 'minDelayTimeDelta', internalType: 'uint256', type: 'uint256' },
          { name: 'maxDelayTimeDelta', internalType: 'uint256', type: 'uint256' },
          { name: 'offchainDelayedOrderMinAge', internalType: 'uint256', type: 'uint256' },
          { name: 'offchainDelayedOrderMaxAge', internalType: 'uint256', type: 'uint256' },
          { name: 'offchainMarketKey', internalType: 'bytes32', type: 'bytes32' },
          { name: 'offchainPriceDivergence', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'contract IPerpsV2MarketViews', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'positionDetails',
    outputs: [
      {
        name: '',
        internalType: 'struct PerpsV2MarketData.PositionData',
        type: 'tuple',
        components: [
          {
            name: 'position',
            internalType: 'struct IPerpsV2MarketBaseTypes.Position',
            type: 'tuple',
            components: [
              { name: 'id', internalType: 'uint64', type: 'uint64' },
              { name: 'lastFundingIndex', internalType: 'uint64', type: 'uint64' },
              { name: 'margin', internalType: 'uint128', type: 'uint128' },
              { name: 'lastPrice', internalType: 'uint128', type: 'uint128' },
              { name: 'size', internalType: 'int128', type: 'int128' },
            ],
          },
          { name: 'notionalValue', internalType: 'int256', type: 'int256' },
          { name: 'profitLoss', internalType: 'int256', type: 'int256' },
          { name: 'accruedFunding', internalType: 'int256', type: 'int256' },
          { name: 'remainingMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'accessibleMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'liquidationPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'canLiquidatePosition', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'positionDetailsForMarketKey',
    outputs: [
      {
        name: '',
        internalType: 'struct PerpsV2MarketData.PositionData',
        type: 'tuple',
        components: [
          {
            name: 'position',
            internalType: 'struct IPerpsV2MarketBaseTypes.Position',
            type: 'tuple',
            components: [
              { name: 'id', internalType: 'uint64', type: 'uint64' },
              { name: 'lastFundingIndex', internalType: 'uint64', type: 'uint64' },
              { name: 'margin', internalType: 'uint128', type: 'uint128' },
              { name: 'lastPrice', internalType: 'uint128', type: 'uint128' },
              { name: 'size', internalType: 'int128', type: 'int128' },
            ],
          },
          { name: 'notionalValue', internalType: 'int256', type: 'int256' },
          { name: 'profitLoss', internalType: 'int256', type: 'int256' },
          { name: 'accruedFunding', internalType: 'int256', type: 'int256' },
          { name: 'remainingMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'accessibleMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'liquidationPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'canLiquidatePosition', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'resolverProxy',
    outputs: [{ name: '', internalType: 'contract IAddressResolver', type: 'address' }],
  },
] as const

/**
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export const marketDataAddress = {
  420: '0x0D9eFa310a4771c444233B10bfB57e5b991ad529',
} as const

/**
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export const marketDataConfig = { address: marketDataAddress, abi: marketDataABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketSettings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export const marketSettingsABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_resolver', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'destination', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'CacheUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'bps', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'LiquidationBufferRatioUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'bps', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'LiquidationFeeRatioUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'minMargin', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MinInitialMarginUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'sUSD', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MinKeeperFeeUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oldOwner', internalType: 'address', type: 'address', indexed: false },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address', indexed: false }],
    name: 'OwnerNominated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'marketKey', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'parameter', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ParameterUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'marketKey', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'parameter', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'value', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'ParameterUpdatedBytes32',
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'acceptOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'delayedOrderConfirmWindow',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isResolverCached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidationBufferRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidationFeeRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'makerFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'makerFeeDelayedOrder',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'makerFeeOffchainDelayedOrder',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'maxDelayTimeDelta',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'maxFundingVelocity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'maxLeverage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'maxMarketValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'minDelayTimeDelta',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minInitialMargin',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minKeeperFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'nextPriceConfirmWindow',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'nominateNewOwner',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nominatedOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'offchainDelayedOrderMaxAge',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'offchainDelayedOrderMinAge',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'offchainMarketKey',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'offchainPriceDivergence',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'overrideCommitFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'parameters',
    outputs: [
      {
        name: '',
        internalType: 'struct IPerpsV2MarketSettings.Parameters',
        type: 'tuple',
        components: [
          { name: 'takerFee', internalType: 'uint256', type: 'uint256' },
          { name: 'makerFee', internalType: 'uint256', type: 'uint256' },
          { name: 'overrideCommitFee', internalType: 'uint256', type: 'uint256' },
          { name: 'takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'maxLeverage', internalType: 'uint256', type: 'uint256' },
          { name: 'maxMarketValue', internalType: 'uint256', type: 'uint256' },
          { name: 'maxFundingVelocity', internalType: 'uint256', type: 'uint256' },
          { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
          { name: 'nextPriceConfirmWindow', internalType: 'uint256', type: 'uint256' },
          { name: 'delayedOrderConfirmWindow', internalType: 'uint256', type: 'uint256' },
          { name: 'minDelayTimeDelta', internalType: 'uint256', type: 'uint256' },
          { name: 'maxDelayTimeDelta', internalType: 'uint256', type: 'uint256' },
          { name: 'offchainDelayedOrderMinAge', internalType: 'uint256', type: 'uint256' },
          { name: 'offchainDelayedOrderMaxAge', internalType: 'uint256', type: 'uint256' },
          { name: 'offchainMarketKey', internalType: 'bytes32', type: 'bytes32' },
          { name: 'offchainPriceDivergence', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'rebuildCache',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'resolver',
    outputs: [{ name: '', internalType: 'contract AddressResolver', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'resolverAddressesRequired',
    outputs: [{ name: 'addresses', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_delayedOrderConfirmWindow', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDelayedOrderConfirmWindow',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_ratio', internalType: 'uint256', type: 'uint256' }],
    name: 'setLiquidationBufferRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_ratio', internalType: 'uint256', type: 'uint256' }],
    name: 'setLiquidationFeeRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_makerFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMakerFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMakerFeeDelayedOrder',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMakerFeeOffchainDelayedOrder',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_maxDelayTimeDelta', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxDelayTimeDelta',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_maxFundingVelocity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxFundingVelocity',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_maxLeverage', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxLeverage',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_maxMarketValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxMarketValue',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_minDelayTimeDelta', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinDelayTimeDelta',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minMargin', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinInitialMargin',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_sUSD', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinKeeperFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_nextPriceConfirmWindow', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setNextPriceConfirmWindow',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_offchainDelayedOrderMaxAge', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setOffchainDelayedOrderMaxAge',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_offchainDelayedOrderMinAge', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setOffchainDelayedOrderMinAge',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_offchainMarketKey', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setOffchainMarketKey',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_offchainPriceDivergence', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setOffchainPriceDivergence',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_overrideCommitFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setOverrideCommitFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_parameters',
        internalType: 'struct IPerpsV2MarketSettings.Parameters',
        type: 'tuple',
        components: [
          { name: 'takerFee', internalType: 'uint256', type: 'uint256' },
          { name: 'makerFee', internalType: 'uint256', type: 'uint256' },
          { name: 'overrideCommitFee', internalType: 'uint256', type: 'uint256' },
          { name: 'takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'makerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'makerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
          { name: 'maxLeverage', internalType: 'uint256', type: 'uint256' },
          { name: 'maxMarketValue', internalType: 'uint256', type: 'uint256' },
          { name: 'maxFundingVelocity', internalType: 'uint256', type: 'uint256' },
          { name: 'skewScale', internalType: 'uint256', type: 'uint256' },
          { name: 'nextPriceConfirmWindow', internalType: 'uint256', type: 'uint256' },
          { name: 'delayedOrderConfirmWindow', internalType: 'uint256', type: 'uint256' },
          { name: 'minDelayTimeDelta', internalType: 'uint256', type: 'uint256' },
          { name: 'maxDelayTimeDelta', internalType: 'uint256', type: 'uint256' },
          { name: 'offchainDelayedOrderMinAge', internalType: 'uint256', type: 'uint256' },
          { name: 'offchainDelayedOrderMaxAge', internalType: 'uint256', type: 'uint256' },
          { name: 'offchainMarketKey', internalType: 'bytes32', type: 'bytes32' },
          { name: 'offchainPriceDivergence', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'setParameters',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_skewScale', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSkewScale',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_takerFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTakerFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_takerFeeDelayedOrder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTakerFeeDelayedOrder',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_marketKey', internalType: 'bytes32', type: 'bytes32' },
      { name: '_takerFeeOffchainDelayedOrder', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTakerFeeOffchainDelayedOrder',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'skewScale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'takerFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'takerFeeDelayedOrder',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_marketKey', internalType: 'bytes32', type: 'bytes32' }],
    name: 'takerFeeOffchainDelayedOrder',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

/**
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export const marketSettingsAddress = {
  420: '0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7',
} as const

/**
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export const marketSettingsConfig = {
  address: marketSettingsAddress,
  abi: marketSettingsABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Market
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'isOffchain', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'currentRoundId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sizeDelta', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'targetRoundId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'commitDeposit', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'keeperDeposit', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'DelayedOrderRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'isOffchain', internalType: 'bool', type: 'bool', indexed: false },
      { name: 'sizeDelta', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'targetRoundId', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'intentionTime', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'executableAtTime', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'commitDeposit', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'keeperDeposit', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'DelayedOrderSubmitted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'funding', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'fundingRate', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'FundingRecomputed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'marginDelta', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'MarginTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'baseAsset', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'marketKey', internalType: 'bytes32', type: 'bytes32', indexed: false },
      { name: 'sizeDelta', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PerpsTracking',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'account', internalType: 'address', type: 'address', indexed: false },
      { name: 'liquidator', internalType: 'address', type: 'address', indexed: false },
      { name: 'size', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'price', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PositionLiquidated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'margin', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'size', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'tradeSize', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'lastPrice', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'fundingIndex', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PositionModified',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'accessibleMargin',
    outputs: [
      { name: 'marginAccessible', internalType: 'uint256', type: 'uint256' },
      { name: 'invalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'accruedFunding',
    outputs: [
      { name: 'funding', internalType: 'int256', type: 'int256' },
      { name: 'invalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'assetPrice',
    outputs: [
      { name: 'price', internalType: 'uint256', type: 'uint256' },
      { name: 'invalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseAsset',
    outputs: [{ name: 'key', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'canLiquidate',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'cancelDelayedOrder',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'cancelOffchainDelayedOrder',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'priceImpactDelta', internalType: 'uint256', type: 'uint256' }],
    name: 'closePosition',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'priceImpactDelta', internalType: 'uint256', type: 'uint256' },
      { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'closePositionWithTracking',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentFundingRate',
    outputs: [{ name: 'fundingRate', internalType: 'int256', type: 'int256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentFundingVelocity',
    outputs: [{ name: 'fundingVelocity', internalType: 'int256', type: 'int256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delayedOrders',
    outputs: [
      {
        name: '',
        internalType: 'struct IPerpsV2MarketConsolidated.DelayedOrder',
        type: 'tuple',
        components: [
          { name: 'isOffchain', internalType: 'bool', type: 'bool' },
          { name: 'sizeDelta', internalType: 'int128', type: 'int128' },
          { name: 'priceImpactDelta', internalType: 'uint128', type: 'uint128' },
          { name: 'targetRoundId', internalType: 'uint128', type: 'uint128' },
          { name: 'commitDeposit', internalType: 'uint128', type: 'uint128' },
          { name: 'keeperDeposit', internalType: 'uint128', type: 'uint128' },
          { name: 'executableAtTime', internalType: 'uint256', type: 'uint256' },
          { name: 'intentionTime', internalType: 'uint256', type: 'uint256' },
          { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'executeDelayedOrder',
    outputs: [],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'priceUpdateData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
    name: 'executeOffchainDelayedOrder',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fundingLastRecomputed',
    outputs: [{ name: 'timestamp', internalType: 'uint32', type: 'uint32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'fundingSequence',
    outputs: [{ name: 'netFunding', internalType: 'int128', type: 'int128' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fundingSequenceLength',
    outputs: [{ name: 'length', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'liquidatePosition',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'liquidationFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'liquidationPrice',
    outputs: [
      { name: 'price', internalType: 'uint256', type: 'uint256' },
      { name: 'invalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'marketDebt',
    outputs: [
      { name: 'debt', internalType: 'uint256', type: 'uint256' },
      { name: 'isInvalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'marketKey',
    outputs: [{ name: 'key', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'marketSize',
    outputs: [{ name: 'size', internalType: 'uint128', type: 'uint128' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'marketSizes',
    outputs: [
      { name: 'long', internalType: 'uint256', type: 'uint256' },
      { name: 'short', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'marketSkew',
    outputs: [{ name: 'skew', internalType: 'int128', type: 'int128' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
      { name: 'priceImpactDelta', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'modifyPosition',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
      { name: 'priceImpactDelta', internalType: 'uint256', type: 'uint256' },
      { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'modifyPositionWithTracking',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'notionalValue',
    outputs: [
      { name: 'value', internalType: 'int256', type: 'int256' },
      { name: 'invalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
      { name: 'orderType', internalType: 'enum IPerpsV2MarketBaseTypes.OrderType', type: 'uint8' },
    ],
    name: 'orderFee',
    outputs: [
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'invalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'positions',
    outputs: [
      {
        name: '',
        internalType: 'struct IPerpsV2MarketConsolidated.Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint64', type: 'uint64' },
          { name: 'lastFundingIndex', internalType: 'uint64', type: 'uint64' },
          { name: 'margin', internalType: 'uint128', type: 'uint128' },
          { name: 'lastPrice', internalType: 'uint128', type: 'uint128' },
          { name: 'size', internalType: 'int128', type: 'int128' },
        ],
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
      { name: 'tradePrice', internalType: 'uint256', type: 'uint256' },
      { name: 'orderType', internalType: 'enum IPerpsV2MarketBaseTypes.OrderType', type: 'uint8' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'postTradeDetails',
    outputs: [
      { name: 'margin', internalType: 'uint256', type: 'uint256' },
      { name: 'size', internalType: 'int256', type: 'int256' },
      { name: 'price', internalType: 'uint256', type: 'uint256' },
      { name: 'liqPrice', internalType: 'uint256', type: 'uint256' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'status', internalType: 'enum IPerpsV2MarketConsolidated.Status', type: 'uint8' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'profitLoss',
    outputs: [
      { name: 'pnl', internalType: 'int256', type: 'int256' },
      { name: 'invalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'recomputeFunding',
    outputs: [{ name: 'lastIndex', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'remainingMargin',
    outputs: [
      { name: 'marginRemaining', internalType: 'uint256', type: 'uint256' },
      { name: 'invalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
      { name: 'priceImpactDelta', internalType: 'uint256', type: 'uint256' },
      { name: 'desiredTimeDelta', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'submitDelayedOrder',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
      { name: 'priceImpactDelta', internalType: 'uint256', type: 'uint256' },
      { name: 'desiredTimeDelta', internalType: 'uint256', type: 'uint256' },
      { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'submitDelayedOrderWithTracking',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
      { name: 'priceImpactDelta', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'submitOffchainDelayedOrder',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sizeDelta', internalType: 'int256', type: 'int256' },
      { name: 'priceImpactDelta', internalType: 'uint256', type: 'uint256' },
      { name: 'trackingCode', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'submitOffchainDelayedOrderWithTracking',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'marginDelta', internalType: 'int256', type: 'int256' }],
    name: 'transferMargin',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'unrecordedFunding',
    outputs: [
      { name: 'funding', internalType: 'int256', type: 'int256' },
      { name: 'invalid', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdrawAllMargin',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'addedValue', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'subtractedValue', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'tokenId', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'operator', type: 'address', indexed: true },
      { name: 'approved', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'tokenId', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'operator', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', type: 'address' },
      { name: 'to', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', type: 'address' },
      { name: 'to', type: 'address' },
      { name: 'id', type: 'uint256' },
      { name: 'data', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', type: 'address' },
      { name: 'approved', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'tokenByIndex',
    outputs: [{ name: 'tokenId', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link marketDataABI}__.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketData(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof marketDataAddress
  } = {} as any,
) {
  return useContract({ abi: marketDataABI, address: marketDataAddress[420], ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof marketDataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"allMarketSummaries"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataAllMarketSummaries<
  TSelectData = ReadContractResult<typeof marketDataABI, 'allMarketSummaries'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'allMarketSummaries', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'allMarketSummaries',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'allMarketSummaries', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"allProxiedMarketSummaries"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataAllProxiedMarketSummaries<
  TSelectData = ReadContractResult<typeof marketDataABI, 'allProxiedMarketSummaries'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'allProxiedMarketSummaries', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'allProxiedMarketSummaries',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'allProxiedMarketSummaries', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"globals"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataGlobals<
  TSelectData = ReadContractResult<typeof marketDataABI, 'globals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'globals', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'globals',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'globals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"marketDetails"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataMarketDetails<
  TSelectData = ReadContractResult<typeof marketDataABI, 'marketDetails'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'marketDetails', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'marketDetails',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'marketDetails', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"marketDetailsForKey"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataMarketDetailsForKey<
  TSelectData = ReadContractResult<typeof marketDataABI, 'marketDetailsForKey'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'marketDetailsForKey', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'marketDetailsForKey',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'marketDetailsForKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"marketSummaries"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataMarketSummaries<
  TSelectData = ReadContractResult<typeof marketDataABI, 'marketSummaries'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'marketSummaries', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'marketSummaries',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'marketSummaries', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"marketSummariesForKeys"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataMarketSummariesForKeys<
  TSelectData = ReadContractResult<typeof marketDataABI, 'marketSummariesForKeys'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'marketSummariesForKeys', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'marketSummariesForKeys',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'marketSummariesForKeys', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"parameters"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataParameters<
  TSelectData = ReadContractResult<typeof marketDataABI, 'parameters'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'parameters', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'parameters',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'parameters', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"positionDetails"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataPositionDetails<
  TSelectData = ReadContractResult<typeof marketDataABI, 'positionDetails'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'positionDetails', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'positionDetails',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'positionDetails', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"positionDetailsForMarketKey"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataPositionDetailsForMarketKey<
  TSelectData = ReadContractResult<typeof marketDataABI, 'positionDetailsForMarketKey'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'positionDetailsForMarketKey', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'positionDetailsForMarketKey',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'positionDetailsForMarketKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketDataABI}__ and `functionName` set to `"resolverProxy"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x0D9eFa310a4771c444233B10bfB57e5b991ad529)
 */
export function useMarketDataResolverProxy<
  TSelectData = ReadContractResult<typeof marketDataABI, 'resolverProxy'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketDataABI, 'resolverProxy', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketDataAddress } = {} as any,
) {
  return useContractRead({
    abi: marketDataABI,
    address: marketDataAddress[420],
    functionName: 'resolverProxy',
    ...config,
  } as UseContractReadConfig<typeof marketDataABI, 'resolverProxy', TSelectData>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link marketSettingsABI}__.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettings(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof marketSettingsAddress
  } = {} as any,
) {
  return useContract({ abi: marketSettingsABI, address: marketSettingsAddress[420], ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof marketSettingsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, TFunctionName, TSelectData>,
    'abi' | 'address'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"delayedOrderConfirmWindow"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsDelayedOrderConfirmWindow<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'delayedOrderConfirmWindow'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'delayedOrderConfirmWindow', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'delayedOrderConfirmWindow',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'delayedOrderConfirmWindow', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"isResolverCached"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsIsResolverCached<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'isResolverCached'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'isResolverCached', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'isResolverCached',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'isResolverCached', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"liquidationBufferRatio"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsLiquidationBufferRatio<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'liquidationBufferRatio'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'liquidationBufferRatio', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'liquidationBufferRatio',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'liquidationBufferRatio', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"liquidationFeeRatio"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsLiquidationFeeRatio<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'liquidationFeeRatio'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'liquidationFeeRatio', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'liquidationFeeRatio',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'liquidationFeeRatio', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"makerFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMakerFee<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'makerFee'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'makerFee', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'makerFee',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'makerFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"makerFeeDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMakerFeeDelayedOrder<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'makerFeeDelayedOrder'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'makerFeeDelayedOrder', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'makerFeeDelayedOrder',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'makerFeeDelayedOrder', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"makerFeeOffchainDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMakerFeeOffchainDelayedOrder<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'makerFeeOffchainDelayedOrder'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'makerFeeOffchainDelayedOrder', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'makerFeeOffchainDelayedOrder',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'makerFeeOffchainDelayedOrder', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"maxDelayTimeDelta"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMaxDelayTimeDelta<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'maxDelayTimeDelta'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'maxDelayTimeDelta', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'maxDelayTimeDelta',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'maxDelayTimeDelta', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"maxFundingVelocity"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMaxFundingVelocity<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'maxFundingVelocity'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'maxFundingVelocity', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'maxFundingVelocity',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'maxFundingVelocity', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"maxLeverage"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMaxLeverage<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'maxLeverage'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'maxLeverage', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'maxLeverage',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'maxLeverage', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"maxMarketValue"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMaxMarketValue<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'maxMarketValue'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'maxMarketValue', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'maxMarketValue',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'maxMarketValue', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"minDelayTimeDelta"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMinDelayTimeDelta<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'minDelayTimeDelta'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'minDelayTimeDelta', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'minDelayTimeDelta',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'minDelayTimeDelta', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"minInitialMargin"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMinInitialMargin<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'minInitialMargin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'minInitialMargin', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'minInitialMargin',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'minInitialMargin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"minKeeperFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMinKeeperFee<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'minKeeperFee'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'minKeeperFee', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'minKeeperFee',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'minKeeperFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"nextPriceConfirmWindow"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsNextPriceConfirmWindow<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'nextPriceConfirmWindow'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'nextPriceConfirmWindow', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'nextPriceConfirmWindow',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'nextPriceConfirmWindow', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"nominatedOwner"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsNominatedOwner<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'nominatedOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'nominatedOwner', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'nominatedOwner',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'nominatedOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"offchainDelayedOrderMaxAge"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsOffchainDelayedOrderMaxAge<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'offchainDelayedOrderMaxAge'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'offchainDelayedOrderMaxAge', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'offchainDelayedOrderMaxAge',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'offchainDelayedOrderMaxAge', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"offchainDelayedOrderMinAge"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsOffchainDelayedOrderMinAge<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'offchainDelayedOrderMinAge'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'offchainDelayedOrderMinAge', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'offchainDelayedOrderMinAge',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'offchainDelayedOrderMinAge', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"offchainMarketKey"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsOffchainMarketKey<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'offchainMarketKey'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'offchainMarketKey', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'offchainMarketKey',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'offchainMarketKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"offchainPriceDivergence"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsOffchainPriceDivergence<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'offchainPriceDivergence'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'offchainPriceDivergence', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'offchainPriceDivergence',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'offchainPriceDivergence', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"overrideCommitFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsOverrideCommitFee<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'overrideCommitFee'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'overrideCommitFee', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'overrideCommitFee',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'overrideCommitFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"owner"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsOwner<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'owner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'owner', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'owner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"parameters"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsParameters<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'parameters'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'parameters', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'parameters',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'parameters', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"resolver"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsResolver<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'resolver'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'resolver', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'resolver',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'resolver', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"resolverAddressesRequired"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsResolverAddressesRequired<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'resolverAddressesRequired'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'resolverAddressesRequired', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'resolverAddressesRequired',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'resolverAddressesRequired', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"skewScale"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSkewScale<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'skewScale'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'skewScale', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'skewScale',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'skewScale', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"takerFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsTakerFee<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'takerFee'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'takerFee', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'takerFee',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'takerFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"takerFeeDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsTakerFeeDelayedOrder<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'takerFeeDelayedOrder'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'takerFeeDelayedOrder', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'takerFeeDelayedOrder',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'takerFeeDelayedOrder', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"takerFeeOffchainDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsTakerFeeOffchainDelayedOrder<
  TSelectData = ReadContractResult<typeof marketSettingsABI, 'takerFeeOffchainDelayedOrder'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketSettingsABI, 'takerFeeOffchainDelayedOrder', TSelectData>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractRead({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'takerFeeOffchainDelayedOrder',
    ...config,
  } as UseContractReadConfig<typeof marketSettingsABI, 'takerFeeOffchainDelayedOrder', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, TFunctionName>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"acceptOwnership"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsAcceptOwnership<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'acceptOwnership'>['abi'],
        'acceptOwnership'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'acceptOwnership' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'acceptOwnership'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'acceptOwnership'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'acceptOwnership'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'acceptOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"nominateNewOwner"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsNominateNewOwner<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'nominateNewOwner'>['abi'],
        'nominateNewOwner'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'nominateNewOwner' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'nominateNewOwner'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'nominateNewOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'nominateNewOwner'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'nominateNewOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"rebuildCache"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsRebuildCache<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'rebuildCache'>['abi'],
        'rebuildCache'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'rebuildCache' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'rebuildCache'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'rebuildCache'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'rebuildCache'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'rebuildCache',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setDelayedOrderConfirmWindow"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetDelayedOrderConfirmWindow<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setDelayedOrderConfirmWindow'>['abi'],
        'setDelayedOrderConfirmWindow'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setDelayedOrderConfirmWindow'
      }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setDelayedOrderConfirmWindow'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setDelayedOrderConfirmWindow'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setDelayedOrderConfirmWindow'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setDelayedOrderConfirmWindow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setLiquidationBufferRatio"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetLiquidationBufferRatio<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setLiquidationBufferRatio'>['abi'],
        'setLiquidationBufferRatio'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setLiquidationBufferRatio'
      }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setLiquidationBufferRatio'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setLiquidationBufferRatio'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setLiquidationBufferRatio'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setLiquidationBufferRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setLiquidationFeeRatio"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetLiquidationFeeRatio<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setLiquidationFeeRatio'>['abi'],
        'setLiquidationFeeRatio'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setLiquidationFeeRatio' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setLiquidationFeeRatio'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setLiquidationFeeRatio'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setLiquidationFeeRatio'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setLiquidationFeeRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMakerFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMakerFee<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setMakerFee'>['abi'],
        'setMakerFee'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMakerFee' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMakerFee'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMakerFee'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMakerFee'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMakerFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMakerFeeDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMakerFeeDelayedOrder<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setMakerFeeDelayedOrder'>['abi'],
        'setMakerFeeDelayedOrder'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMakerFeeDelayedOrder' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMakerFeeDelayedOrder'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMakerFeeDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMakerFeeDelayedOrder'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMakerFeeDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMakerFeeOffchainDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMakerFeeOffchainDelayedOrder<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof marketSettingsABI,
          'setMakerFeeOffchainDelayedOrder'
        >['abi'],
        'setMakerFeeOffchainDelayedOrder'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setMakerFeeOffchainDelayedOrder'
      }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMakerFeeOffchainDelayedOrder'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMakerFeeOffchainDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMakerFeeOffchainDelayedOrder'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMakerFeeOffchainDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMaxDelayTimeDelta"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMaxDelayTimeDelta<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setMaxDelayTimeDelta'>['abi'],
        'setMaxDelayTimeDelta'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMaxDelayTimeDelta' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMaxDelayTimeDelta'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMaxDelayTimeDelta'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMaxDelayTimeDelta'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMaxDelayTimeDelta',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMaxFundingVelocity"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMaxFundingVelocity<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setMaxFundingVelocity'>['abi'],
        'setMaxFundingVelocity'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMaxFundingVelocity' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMaxFundingVelocity'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMaxFundingVelocity'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMaxFundingVelocity'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMaxFundingVelocity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMaxLeverage"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMaxLeverage<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setMaxLeverage'>['abi'],
        'setMaxLeverage'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMaxLeverage' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMaxLeverage'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMaxLeverage'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMaxLeverage'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMaxLeverage',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMaxMarketValue"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMaxMarketValue<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setMaxMarketValue'>['abi'],
        'setMaxMarketValue'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMaxMarketValue' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMaxMarketValue'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMaxMarketValue'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMaxMarketValue'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMaxMarketValue',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMinDelayTimeDelta"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMinDelayTimeDelta<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setMinDelayTimeDelta'>['abi'],
        'setMinDelayTimeDelta'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMinDelayTimeDelta' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMinDelayTimeDelta'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMinDelayTimeDelta'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMinDelayTimeDelta'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMinDelayTimeDelta',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMinInitialMargin"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMinInitialMargin<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setMinInitialMargin'>['abi'],
        'setMinInitialMargin'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMinInitialMargin' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMinInitialMargin'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMinInitialMargin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMinInitialMargin'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMinInitialMargin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMinKeeperFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetMinKeeperFee<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setMinKeeperFee'>['abi'],
        'setMinKeeperFee'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setMinKeeperFee' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setMinKeeperFee'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setMinKeeperFee'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setMinKeeperFee'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMinKeeperFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setNextPriceConfirmWindow"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetNextPriceConfirmWindow<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setNextPriceConfirmWindow'>['abi'],
        'setNextPriceConfirmWindow'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setNextPriceConfirmWindow'
      }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setNextPriceConfirmWindow'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setNextPriceConfirmWindow'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setNextPriceConfirmWindow'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setNextPriceConfirmWindow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOffchainDelayedOrderMaxAge"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetOffchainDelayedOrderMaxAge<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof marketSettingsABI,
          'setOffchainDelayedOrderMaxAge'
        >['abi'],
        'setOffchainDelayedOrderMaxAge'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setOffchainDelayedOrderMaxAge'
      }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setOffchainDelayedOrderMaxAge'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setOffchainDelayedOrderMaxAge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setOffchainDelayedOrderMaxAge'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOffchainDelayedOrderMaxAge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOffchainDelayedOrderMinAge"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetOffchainDelayedOrderMinAge<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof marketSettingsABI,
          'setOffchainDelayedOrderMinAge'
        >['abi'],
        'setOffchainDelayedOrderMinAge'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setOffchainDelayedOrderMinAge'
      }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setOffchainDelayedOrderMinAge'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setOffchainDelayedOrderMinAge'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setOffchainDelayedOrderMinAge'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOffchainDelayedOrderMinAge',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOffchainMarketKey"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetOffchainMarketKey<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setOffchainMarketKey'>['abi'],
        'setOffchainMarketKey'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setOffchainMarketKey' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setOffchainMarketKey'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setOffchainMarketKey'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setOffchainMarketKey'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOffchainMarketKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOffchainPriceDivergence"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetOffchainPriceDivergence<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setOffchainPriceDivergence'>['abi'],
        'setOffchainPriceDivergence'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setOffchainPriceDivergence'
      }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setOffchainPriceDivergence'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setOffchainPriceDivergence'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setOffchainPriceDivergence'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOffchainPriceDivergence',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOverrideCommitFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetOverrideCommitFee<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setOverrideCommitFee'>['abi'],
        'setOverrideCommitFee'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setOverrideCommitFee' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setOverrideCommitFee'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setOverrideCommitFee'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setOverrideCommitFee'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOverrideCommitFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setParameters"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetParameters<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setParameters'>['abi'],
        'setParameters'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setParameters' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setParameters'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setParameters'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setParameters'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setParameters',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setSkewScale"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetSkewScale<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setSkewScale'>['abi'],
        'setSkewScale'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setSkewScale' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setSkewScale'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setSkewScale'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setSkewScale'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setSkewScale',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setTakerFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetTakerFee<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setTakerFee'>['abi'],
        'setTakerFee'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setTakerFee' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setTakerFee'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTakerFee'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setTakerFee'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setTakerFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setTakerFeeDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetTakerFeeDelayedOrder<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketSettingsABI, 'setTakerFeeDelayedOrder'>['abi'],
        'setTakerFeeDelayedOrder'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'setTakerFeeDelayedOrder' }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setTakerFeeDelayedOrder'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTakerFeeDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setTakerFeeDelayedOrder'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setTakerFeeDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setTakerFeeOffchainDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsSetTakerFeeOffchainDelayedOrder<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof marketSettingsAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof marketSettingsABI,
          'setTakerFeeOffchainDelayedOrder'
        >['abi'],
        'setTakerFeeOffchainDelayedOrder'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setTakerFeeOffchainDelayedOrder'
      }
    : UseContractWriteConfig<TMode, typeof marketSettingsABI, 'setTakerFeeOffchainDelayedOrder'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setTakerFeeOffchainDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketSettingsABI, 'setTakerFeeOffchainDelayedOrder'>({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setTakerFeeOffchainDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"acceptOwnership"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'acceptOwnership'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'acceptOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'acceptOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"nominateNewOwner"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsNominateNewOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'nominateNewOwner'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'nominateNewOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'nominateNewOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"rebuildCache"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsRebuildCache(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'rebuildCache'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'rebuildCache',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'rebuildCache'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setDelayedOrderConfirmWindow"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetDelayedOrderConfirmWindow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setDelayedOrderConfirmWindow'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setDelayedOrderConfirmWindow',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setDelayedOrderConfirmWindow'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setLiquidationBufferRatio"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetLiquidationBufferRatio(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setLiquidationBufferRatio'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setLiquidationBufferRatio',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setLiquidationBufferRatio'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setLiquidationFeeRatio"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetLiquidationFeeRatio(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setLiquidationFeeRatio'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setLiquidationFeeRatio',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setLiquidationFeeRatio'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMakerFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMakerFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMakerFee'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMakerFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMakerFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMakerFeeDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMakerFeeDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMakerFeeDelayedOrder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMakerFeeDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMakerFeeDelayedOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMakerFeeOffchainDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMakerFeeOffchainDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMakerFeeOffchainDelayedOrder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMakerFeeOffchainDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMakerFeeOffchainDelayedOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMaxDelayTimeDelta"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMaxDelayTimeDelta(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMaxDelayTimeDelta'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMaxDelayTimeDelta',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMaxDelayTimeDelta'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMaxFundingVelocity"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMaxFundingVelocity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMaxFundingVelocity'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMaxFundingVelocity',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMaxFundingVelocity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMaxLeverage"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMaxLeverage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMaxLeverage'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMaxLeverage',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMaxLeverage'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMaxMarketValue"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMaxMarketValue(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMaxMarketValue'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMaxMarketValue',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMaxMarketValue'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMinDelayTimeDelta"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMinDelayTimeDelta(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMinDelayTimeDelta'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMinDelayTimeDelta',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMinDelayTimeDelta'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMinInitialMargin"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMinInitialMargin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMinInitialMargin'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMinInitialMargin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMinInitialMargin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setMinKeeperFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetMinKeeperFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMinKeeperFee'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setMinKeeperFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setMinKeeperFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setNextPriceConfirmWindow"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetNextPriceConfirmWindow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setNextPriceConfirmWindow'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setNextPriceConfirmWindow',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setNextPriceConfirmWindow'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOffchainDelayedOrderMaxAge"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetOffchainDelayedOrderMaxAge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOffchainDelayedOrderMaxAge'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOffchainDelayedOrderMaxAge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOffchainDelayedOrderMaxAge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOffchainDelayedOrderMinAge"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetOffchainDelayedOrderMinAge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOffchainDelayedOrderMinAge'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOffchainDelayedOrderMinAge',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOffchainDelayedOrderMinAge'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOffchainMarketKey"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetOffchainMarketKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOffchainMarketKey'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOffchainMarketKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOffchainMarketKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOffchainPriceDivergence"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetOffchainPriceDivergence(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOffchainPriceDivergence'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOffchainPriceDivergence',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOffchainPriceDivergence'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setOverrideCommitFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetOverrideCommitFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOverrideCommitFee'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setOverrideCommitFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setOverrideCommitFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setParameters"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetParameters(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setParameters'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setParameters',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setParameters'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setSkewScale"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetSkewScale(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setSkewScale'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setSkewScale',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setSkewScale'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setTakerFee"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetTakerFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setTakerFee'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setTakerFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setTakerFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setTakerFeeDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetTakerFeeDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setTakerFeeDelayedOrder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setTakerFeeDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setTakerFeeDelayedOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketSettingsABI}__ and `functionName` set to `"setTakerFeeOffchainDelayedOrder"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function usePrepareMarketSettingsSetTakerFeeOffchainDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setTakerFeeOffchainDelayedOrder'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    functionName: 'setTakerFeeOffchainDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketSettingsABI, 'setTakerFeeOffchainDelayedOrder'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof marketSettingsABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof marketSettingsAddress
  } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__ and `eventName` set to `"CacheUpdated"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsCacheUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketSettingsABI, 'CacheUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    eventName: 'CacheUpdated',
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, 'CacheUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__ and `eventName` set to `"LiquidationBufferRatioUpdated"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsLiquidationBufferRatioUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketSettingsABI, 'LiquidationBufferRatioUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    eventName: 'LiquidationBufferRatioUpdated',
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, 'LiquidationBufferRatioUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__ and `eventName` set to `"LiquidationFeeRatioUpdated"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsLiquidationFeeRatioUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketSettingsABI, 'LiquidationFeeRatioUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    eventName: 'LiquidationFeeRatioUpdated',
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, 'LiquidationFeeRatioUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__ and `eventName` set to `"MinInitialMarginUpdated"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMinInitialMarginUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketSettingsABI, 'MinInitialMarginUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    eventName: 'MinInitialMarginUpdated',
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, 'MinInitialMarginUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__ and `eventName` set to `"MinKeeperFeeUpdated"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsMinKeeperFeeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketSettingsABI, 'MinKeeperFeeUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    eventName: 'MinKeeperFeeUpdated',
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, 'MinKeeperFeeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__ and `eventName` set to `"OwnerChanged"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsOwnerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketSettingsABI, 'OwnerChanged'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    eventName: 'OwnerChanged',
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, 'OwnerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__ and `eventName` set to `"OwnerNominated"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsOwnerNominatedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketSettingsABI, 'OwnerNominated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    eventName: 'OwnerNominated',
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, 'OwnerNominated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__ and `eventName` set to `"ParameterUpdated"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsParameterUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketSettingsABI, 'ParameterUpdated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    eventName: 'ParameterUpdated',
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, 'ParameterUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketSettingsABI}__ and `eventName` set to `"ParameterUpdatedBytes32"`.
 *
 * [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0x14fA3376E2ffa41708A0636009A35CAE8D8E2bc7)
 */
export function useMarketSettingsParameterUpdatedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof marketSettingsABI, 'ParameterUpdatedBytes32'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof marketSettingsAddress } = {} as any,
) {
  return useContractEvent({
    abi: marketSettingsABI,
    address: marketSettingsAddress[420],
    eventName: 'ParameterUpdatedBytes32',
    ...config,
  } as UseContractEventConfig<typeof marketSettingsABI, 'ParameterUpdatedBytes32'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link marketABI}__.
 */
export function useMarket(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: marketABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__.
 */
export function useMarketRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof marketABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: marketABI, ...config } as UseContractReadConfig<
    typeof marketABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"accessibleMargin"`.
 */
export function useMarketAccessibleMargin<
  TSelectData = ReadContractResult<typeof marketABI, 'accessibleMargin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'accessibleMargin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'accessibleMargin',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'accessibleMargin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"accruedFunding"`.
 */
export function useMarketAccruedFunding<
  TSelectData = ReadContractResult<typeof marketABI, 'accruedFunding'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'accruedFunding', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'accruedFunding',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'accruedFunding', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"assetPrice"`.
 */
export function useMarketAssetPrice<
  TSelectData = ReadContractResult<typeof marketABI, 'assetPrice'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'assetPrice', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'assetPrice',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'assetPrice', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"baseAsset"`.
 */
export function useMarketBaseAsset<TSelectData = ReadContractResult<typeof marketABI, 'baseAsset'>>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'baseAsset', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'baseAsset',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'baseAsset', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"canLiquidate"`.
 */
export function useMarketCanLiquidate<
  TSelectData = ReadContractResult<typeof marketABI, 'canLiquidate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'canLiquidate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'canLiquidate',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'canLiquidate', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"currentFundingRate"`.
 */
export function useMarketCurrentFundingRate<
  TSelectData = ReadContractResult<typeof marketABI, 'currentFundingRate'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'currentFundingRate', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'currentFundingRate',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'currentFundingRate', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"currentFundingVelocity"`.
 */
export function useMarketCurrentFundingVelocity<
  TSelectData = ReadContractResult<typeof marketABI, 'currentFundingVelocity'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'currentFundingVelocity', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'currentFundingVelocity',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'currentFundingVelocity', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"delayedOrders"`.
 */
export function useMarketDelayedOrders<
  TSelectData = ReadContractResult<typeof marketABI, 'delayedOrders'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'delayedOrders', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'delayedOrders',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'delayedOrders', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"fundingLastRecomputed"`.
 */
export function useMarketFundingLastRecomputed<
  TSelectData = ReadContractResult<typeof marketABI, 'fundingLastRecomputed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'fundingLastRecomputed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'fundingLastRecomputed',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'fundingLastRecomputed', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"fundingSequence"`.
 */
export function useMarketFundingSequence<
  TSelectData = ReadContractResult<typeof marketABI, 'fundingSequence'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'fundingSequence', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'fundingSequence',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'fundingSequence', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"fundingSequenceLength"`.
 */
export function useMarketFundingSequenceLength<
  TSelectData = ReadContractResult<typeof marketABI, 'fundingSequenceLength'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'fundingSequenceLength', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'fundingSequenceLength',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'fundingSequenceLength', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"liquidationFee"`.
 */
export function useMarketLiquidationFee<
  TSelectData = ReadContractResult<typeof marketABI, 'liquidationFee'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'liquidationFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'liquidationFee',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'liquidationFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"liquidationPrice"`.
 */
export function useMarketLiquidationPrice<
  TSelectData = ReadContractResult<typeof marketABI, 'liquidationPrice'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'liquidationPrice', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'liquidationPrice',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'liquidationPrice', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"marketDebt"`.
 */
export function useMarketMarketDebt<
  TSelectData = ReadContractResult<typeof marketABI, 'marketDebt'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'marketDebt', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'marketDebt',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'marketDebt', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"marketKey"`.
 */
export function useMarketMarketKey<TSelectData = ReadContractResult<typeof marketABI, 'marketKey'>>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'marketKey', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'marketKey',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'marketKey', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"marketSize"`.
 */
export function useMarketMarketSize<
  TSelectData = ReadContractResult<typeof marketABI, 'marketSize'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'marketSize', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'marketSize',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'marketSize', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"marketSizes"`.
 */
export function useMarketMarketSizes<
  TSelectData = ReadContractResult<typeof marketABI, 'marketSizes'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'marketSizes', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'marketSizes',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'marketSizes', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"marketSkew"`.
 */
export function useMarketMarketSkew<
  TSelectData = ReadContractResult<typeof marketABI, 'marketSkew'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'marketSkew', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'marketSkew',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'marketSkew', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"notionalValue"`.
 */
export function useMarketNotionalValue<
  TSelectData = ReadContractResult<typeof marketABI, 'notionalValue'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'notionalValue', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'notionalValue',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'notionalValue', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"orderFee"`.
 */
export function useMarketOrderFee<TSelectData = ReadContractResult<typeof marketABI, 'orderFee'>>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'orderFee', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'orderFee',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'orderFee', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"positions"`.
 */
export function useMarketPositions<TSelectData = ReadContractResult<typeof marketABI, 'positions'>>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'positions', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'positions',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'positions', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"postTradeDetails"`.
 */
export function useMarketPostTradeDetails<
  TSelectData = ReadContractResult<typeof marketABI, 'postTradeDetails'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'postTradeDetails', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'postTradeDetails',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'postTradeDetails', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"profitLoss"`.
 */
export function useMarketProfitLoss<
  TSelectData = ReadContractResult<typeof marketABI, 'profitLoss'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'profitLoss', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'profitLoss',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'profitLoss', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"remainingMargin"`.
 */
export function useMarketRemainingMargin<
  TSelectData = ReadContractResult<typeof marketABI, 'remainingMargin'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'remainingMargin', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'remainingMargin',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'remainingMargin', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"unrecordedFunding"`.
 */
export function useMarketUnrecordedFunding<
  TSelectData = ReadContractResult<typeof marketABI, 'unrecordedFunding'>,
>(
  config: Omit<
    UseContractReadConfig<typeof marketABI, 'unrecordedFunding', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketABI,
    functionName: 'unrecordedFunding',
    ...config,
  } as UseContractReadConfig<typeof marketABI, 'unrecordedFunding', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__.
 */
export function useMarketWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof marketABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, TFunctionName>({
    abi: marketABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"cancelDelayedOrder"`.
 */
export function useMarketCancelDelayedOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'cancelDelayedOrder'>['abi'],
        'cancelDelayedOrder'
      > & { functionName?: 'cancelDelayedOrder' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'cancelDelayedOrder'> & {
        abi?: never
        functionName?: 'cancelDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'cancelDelayedOrder'>({
    abi: marketABI,
    functionName: 'cancelDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"cancelOffchainDelayedOrder"`.
 */
export function useMarketCancelOffchainDelayedOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'cancelOffchainDelayedOrder'>['abi'],
        'cancelOffchainDelayedOrder'
      > & { functionName?: 'cancelOffchainDelayedOrder' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'cancelOffchainDelayedOrder'> & {
        abi?: never
        functionName?: 'cancelOffchainDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'cancelOffchainDelayedOrder'>({
    abi: marketABI,
    functionName: 'cancelOffchainDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"closePosition"`.
 */
export function useMarketClosePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'closePosition'>['abi'],
        'closePosition'
      > & { functionName?: 'closePosition' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'closePosition'> & {
        abi?: never
        functionName?: 'closePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'closePosition'>({
    abi: marketABI,
    functionName: 'closePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"closePositionWithTracking"`.
 */
export function useMarketClosePositionWithTracking<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'closePositionWithTracking'>['abi'],
        'closePositionWithTracking'
      > & { functionName?: 'closePositionWithTracking' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'closePositionWithTracking'> & {
        abi?: never
        functionName?: 'closePositionWithTracking'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'closePositionWithTracking'>({
    abi: marketABI,
    functionName: 'closePositionWithTracking',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"executeDelayedOrder"`.
 */
export function useMarketExecuteDelayedOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'executeDelayedOrder'>['abi'],
        'executeDelayedOrder'
      > & { functionName?: 'executeDelayedOrder' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'executeDelayedOrder'> & {
        abi?: never
        functionName?: 'executeDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'executeDelayedOrder'>({
    abi: marketABI,
    functionName: 'executeDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"executeOffchainDelayedOrder"`.
 */
export function useMarketExecuteOffchainDelayedOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'executeOffchainDelayedOrder'>['abi'],
        'executeOffchainDelayedOrder'
      > & { functionName?: 'executeOffchainDelayedOrder' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'executeOffchainDelayedOrder'> & {
        abi?: never
        functionName?: 'executeOffchainDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'executeOffchainDelayedOrder'>({
    abi: marketABI,
    functionName: 'executeOffchainDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"liquidatePosition"`.
 */
export function useMarketLiquidatePosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'liquidatePosition'>['abi'],
        'liquidatePosition'
      > & { functionName?: 'liquidatePosition' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'liquidatePosition'> & {
        abi?: never
        functionName?: 'liquidatePosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'liquidatePosition'>({
    abi: marketABI,
    functionName: 'liquidatePosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"modifyPosition"`.
 */
export function useMarketModifyPosition<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'modifyPosition'>['abi'],
        'modifyPosition'
      > & { functionName?: 'modifyPosition' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'modifyPosition'> & {
        abi?: never
        functionName?: 'modifyPosition'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'modifyPosition'>({
    abi: marketABI,
    functionName: 'modifyPosition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"modifyPositionWithTracking"`.
 */
export function useMarketModifyPositionWithTracking<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'modifyPositionWithTracking'>['abi'],
        'modifyPositionWithTracking'
      > & { functionName?: 'modifyPositionWithTracking' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'modifyPositionWithTracking'> & {
        abi?: never
        functionName?: 'modifyPositionWithTracking'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'modifyPositionWithTracking'>({
    abi: marketABI,
    functionName: 'modifyPositionWithTracking',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"recomputeFunding"`.
 */
export function useMarketRecomputeFunding<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'recomputeFunding'>['abi'],
        'recomputeFunding'
      > & { functionName?: 'recomputeFunding' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'recomputeFunding'> & {
        abi?: never
        functionName?: 'recomputeFunding'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'recomputeFunding'>({
    abi: marketABI,
    functionName: 'recomputeFunding',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"submitDelayedOrder"`.
 */
export function useMarketSubmitDelayedOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'submitDelayedOrder'>['abi'],
        'submitDelayedOrder'
      > & { functionName?: 'submitDelayedOrder' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'submitDelayedOrder'> & {
        abi?: never
        functionName?: 'submitDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'submitDelayedOrder'>({
    abi: marketABI,
    functionName: 'submitDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"submitDelayedOrderWithTracking"`.
 */
export function useMarketSubmitDelayedOrderWithTracking<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'submitDelayedOrderWithTracking'>['abi'],
        'submitDelayedOrderWithTracking'
      > & { functionName?: 'submitDelayedOrderWithTracking' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'submitDelayedOrderWithTracking'> & {
        abi?: never
        functionName?: 'submitDelayedOrderWithTracking'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'submitDelayedOrderWithTracking'>({
    abi: marketABI,
    functionName: 'submitDelayedOrderWithTracking',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"submitOffchainDelayedOrder"`.
 */
export function useMarketSubmitOffchainDelayedOrder<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'submitOffchainDelayedOrder'>['abi'],
        'submitOffchainDelayedOrder'
      > & { functionName?: 'submitOffchainDelayedOrder' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'submitOffchainDelayedOrder'> & {
        abi?: never
        functionName?: 'submitOffchainDelayedOrder'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'submitOffchainDelayedOrder'>({
    abi: marketABI,
    functionName: 'submitOffchainDelayedOrder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"submitOffchainDelayedOrderWithTracking"`.
 */
export function useMarketSubmitOffchainDelayedOrderWithTracking<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof marketABI,
          'submitOffchainDelayedOrderWithTracking'
        >['abi'],
        'submitOffchainDelayedOrderWithTracking'
      > & { functionName?: 'submitOffchainDelayedOrderWithTracking' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'submitOffchainDelayedOrderWithTracking'> & {
        abi?: never
        functionName?: 'submitOffchainDelayedOrderWithTracking'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'submitOffchainDelayedOrderWithTracking'>({
    abi: marketABI,
    functionName: 'submitOffchainDelayedOrderWithTracking',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"transferMargin"`.
 */
export function useMarketTransferMargin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'transferMargin'>['abi'],
        'transferMargin'
      > & { functionName?: 'transferMargin' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'transferMargin'> & {
        abi?: never
        functionName?: 'transferMargin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'transferMargin'>({
    abi: marketABI,
    functionName: 'transferMargin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"withdrawAllMargin"`.
 */
export function useMarketWithdrawAllMargin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketABI, 'withdrawAllMargin'>['abi'],
        'withdrawAllMargin'
      > & { functionName?: 'withdrawAllMargin' }
    : UseContractWriteConfig<TMode, typeof marketABI, 'withdrawAllMargin'> & {
        abi?: never
        functionName?: 'withdrawAllMargin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketABI, 'withdrawAllMargin'>({
    abi: marketABI,
    functionName: 'withdrawAllMargin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__.
 */
export function usePrepareMarketWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof marketABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: marketABI, ...config } as UsePrepareContractWriteConfig<
    typeof marketABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"cancelDelayedOrder"`.
 */
export function usePrepareMarketCancelDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'cancelDelayedOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'cancelDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'cancelDelayedOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"cancelOffchainDelayedOrder"`.
 */
export function usePrepareMarketCancelOffchainDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'cancelOffchainDelayedOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'cancelOffchainDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'cancelOffchainDelayedOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"closePosition"`.
 */
export function usePrepareMarketClosePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'closePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'closePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'closePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"closePositionWithTracking"`.
 */
export function usePrepareMarketClosePositionWithTracking(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'closePositionWithTracking'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'closePositionWithTracking',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'closePositionWithTracking'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"executeDelayedOrder"`.
 */
export function usePrepareMarketExecuteDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'executeDelayedOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'executeDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'executeDelayedOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"executeOffchainDelayedOrder"`.
 */
export function usePrepareMarketExecuteOffchainDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'executeOffchainDelayedOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'executeOffchainDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'executeOffchainDelayedOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"liquidatePosition"`.
 */
export function usePrepareMarketLiquidatePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'liquidatePosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'liquidatePosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'liquidatePosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"modifyPosition"`.
 */
export function usePrepareMarketModifyPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'modifyPosition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'modifyPosition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'modifyPosition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"modifyPositionWithTracking"`.
 */
export function usePrepareMarketModifyPositionWithTracking(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'modifyPositionWithTracking'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'modifyPositionWithTracking',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'modifyPositionWithTracking'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"recomputeFunding"`.
 */
export function usePrepareMarketRecomputeFunding(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'recomputeFunding'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'recomputeFunding',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'recomputeFunding'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"submitDelayedOrder"`.
 */
export function usePrepareMarketSubmitDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'submitDelayedOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'submitDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'submitDelayedOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"submitDelayedOrderWithTracking"`.
 */
export function usePrepareMarketSubmitDelayedOrderWithTracking(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'submitDelayedOrderWithTracking'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'submitDelayedOrderWithTracking',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'submitDelayedOrderWithTracking'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"submitOffchainDelayedOrder"`.
 */
export function usePrepareMarketSubmitOffchainDelayedOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'submitOffchainDelayedOrder'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'submitOffchainDelayedOrder',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'submitOffchainDelayedOrder'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"submitOffchainDelayedOrderWithTracking"`.
 */
export function usePrepareMarketSubmitOffchainDelayedOrderWithTracking(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'submitOffchainDelayedOrderWithTracking'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'submitOffchainDelayedOrderWithTracking',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'submitOffchainDelayedOrderWithTracking'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"transferMargin"`.
 */
export function usePrepareMarketTransferMargin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'transferMargin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'transferMargin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'transferMargin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketABI}__ and `functionName` set to `"withdrawAllMargin"`.
 */
export function usePrepareMarketWithdrawAllMargin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketABI, 'withdrawAllMargin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketABI,
    functionName: 'withdrawAllMargin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketABI, 'withdrawAllMargin'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketABI}__.
 */
export function useMarketEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof marketABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: marketABI, ...config } as UseContractEventConfig<
    typeof marketABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketABI}__ and `eventName` set to `"DelayedOrderRemoved"`.
 */
export function useMarketDelayedOrderRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketABI, 'DelayedOrderRemoved'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketABI,
    eventName: 'DelayedOrderRemoved',
    ...config,
  } as UseContractEventConfig<typeof marketABI, 'DelayedOrderRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketABI}__ and `eventName` set to `"DelayedOrderSubmitted"`.
 */
export function useMarketDelayedOrderSubmittedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketABI, 'DelayedOrderSubmitted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketABI,
    eventName: 'DelayedOrderSubmitted',
    ...config,
  } as UseContractEventConfig<typeof marketABI, 'DelayedOrderSubmitted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketABI}__ and `eventName` set to `"FundingRecomputed"`.
 */
export function useMarketFundingRecomputedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketABI, 'FundingRecomputed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketABI,
    eventName: 'FundingRecomputed',
    ...config,
  } as UseContractEventConfig<typeof marketABI, 'FundingRecomputed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketABI}__ and `eventName` set to `"MarginTransferred"`.
 */
export function useMarketMarginTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof marketABI, 'MarginTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketABI,
    eventName: 'MarginTransferred',
    ...config,
  } as UseContractEventConfig<typeof marketABI, 'MarginTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketABI}__ and `eventName` set to `"PerpsTracking"`.
 */
export function useMarketPerpsTrackingEvent(
  config: Omit<
    UseContractEventConfig<typeof marketABI, 'PerpsTracking'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketABI,
    eventName: 'PerpsTracking',
    ...config,
  } as UseContractEventConfig<typeof marketABI, 'PerpsTracking'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketABI}__ and `eventName` set to `"PositionLiquidated"`.
 */
export function useMarketPositionLiquidatedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketABI, 'PositionLiquidated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketABI,
    eventName: 'PositionLiquidated',
    ...config,
  } as UseContractEventConfig<typeof marketABI, 'PositionLiquidated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketABI}__ and `eventName` set to `"PositionModified"`.
 */
export function useMarketPositionModifiedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketABI, 'PositionModified'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketABI,
    eventName: 'PositionModified',
    ...config,
  } as UseContractEventConfig<typeof marketABI, 'PositionModified'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<TSelectData = ReadContractResult<typeof erc20ABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc20ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc20ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc20ABI, ...config } as UseContractEventConfig<
    typeof erc20ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<TSelectData = ReadContractResult<typeof erc721ABI, 'balanceOf'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TSelectData = ReadContractResult<typeof erc721ABI, 'getApproved'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'getApproved', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TSelectData = ReadContractResult<typeof erc721ABI, 'isApprovedForAll'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<TSelectData = ReadContractResult<typeof erc721ABI, 'name'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<TSelectData = ReadContractResult<typeof erc721ABI, 'ownerOf'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'ownerOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<TSelectData = ReadContractResult<typeof erc721ABI, 'symbol'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721TokenByIndex<
  TSelectData = ReadContractResult<typeof erc721ABI, 'tokenByIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenByIndex', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<TSelectData = ReadContractResult<typeof erc721ABI, 'tokenURI'>>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenURI', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721TotalSupply<
  TSelectData = ReadContractResult<typeof erc721ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'setApprovalForAll'>['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>, 'abi'> = {} as any,
) {
  return usePrepareContractWrite({ abi: erc721ABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc721ABI, TEventName>, 'abi'> = {} as any,
) {
  return useContractEvent({ abi: erc721ABI, ...config } as UseContractEventConfig<
    typeof erc721ABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}
